# Part of Odoo. See LICENSE file for full copyright and licensing details.

import base64
import logging

from odoo import api, fields, models

_logger = logging.getLogger(__name__)


class PayslipEdiDocument(models.Model):
    _name = "payslip.edi.document"
    _description = "Electronic Document for an hr.payslip"

    # == Stored fields ==
    payslip_id = fields.Many2one("hr.payslip", required=True, ondelete="cascade")
    edi_format_id = fields.Many2one("account.edi.format", required=True)
    attachment_id = fields.Many2one(
        "ir.attachment",
        help="The file generated by edi_format_id when the invoice is posted "
        "(and this document is processed).",
    )
    state = fields.Selection(
        [
            ("to_send", "To Send"),
            ("sent", "Sent"),
            ("to_cancel", "To Cancel"),
            ("cancelled", "Cancelled"),
        ]
    )
    error = fields.Html(
        help="The text of the last error that happened during Electronic Invoice operation."
    )

    # == Not stored fields ==
    name = fields.Char(related="attachment_id.name")
    edi_format_name = fields.Char(string="Format Name", related="edi_format_id.name")
    edi_content = fields.Binary(compute="_compute_edi_content", compute_sudo=True)

    _sql_constraints = [
        (
            "unique_edi_document_by_payslip_by_format",
            "UNIQUE(edi_format_id, payslip_id)",
            "Only one edi document by payslip by format",
        ),
    ]

    @api.depends("payslip_id", "error", "state")
    def _compute_edi_content(self):
        for doc in self:
            res = b""
            if doc.state in ("to_send", "to_cancel"):
                payslip = doc.payslip_id
                config_errors = doc.edi_format_id._check_move_configuration(payslip)
                if config_errors:
                    res = base64.b64encode("\n".join(config_errors).encode("UTF-8"))
                else:
                    res = base64.b64encode(
                        doc.edi_format_id._get_payslip_edi_content(doc.payslip_id)
                    )
            _logger.info("_compute_edi_content", res)
            doc.edi_content = res

    def action_export_xml(self):
        self.ensure_one()
        return {
            "type": "ir.actions.act_url",
            "url": "/web/content/account.edi.document/%s/edi_content" % self.id,
        }
